/*! Â© 2022 imaoki | MIT License | https://github.com/imaoki */;global startupLoader;struct StartupLoaderStruct (private hasSystemShutdownStarted = false,private installerFlags = #(),private scriptFiles = #(),private startupFilePath = "",private dateTimeClass = DotNetClass "System.DateTime",private fileClass = DotNetClass "System.IO.File",private globalVarName = "startupLoader",private pathClass = DotNetClass "System.IO.Path",private utf8withoutBOM = DotNetObject "System.Text.UTF8Encoding" false,public fn GetInstallerFlags = (this.installerFlags;),public fn GetScriptFiles = (this.scriptFiles;),public fn GetStartupFilePath = (this.startupFilePath;),public fn Install = (::StartupLoaderStruct();format "[install]::startupLoader\n";ok;),public fn OnPreSystemShutdown = (this.Save();this.hasSystemShutdownStarted = true;ok;),public fn RegisterFile scriptFilePath installer:false = (if findItem this.scriptFiles scriptFilePath == 0 do (append this.installerFlags installer;append this.scriptFiles scriptFilePath;this.notify #(#InstallerFlags, #ScriptFiles););findItem this.scriptFiles scriptFilePath > 0;),public fn Save = (if not this.hasSystemShutdownStarted do (local content = StringStream "";local now = this.dateTimeClass.Now.ToString "yyyy/MM/dd HH:mm:ss K";format "/* Generated by StartupLoader % at % */\n" this.version now to:content;format "fileIn @\"%\"\n" (getSourceFileName()) to:content;for i = 1 to this.scriptFiles.Count do (local scriptFilePath = this.scriptFiles[i];if this.installerFlags[i] then (format "(fileIn @\"%\").Install()\n" scriptFilePath to:content;);else (format "fileIn @\"%\"\n" scriptFilePath to:content;););format "::%.Save()\n" this.globalVarName to:content;content = content as String;this.fileClass.WriteAllText this.startupFilePath content this.utf8withoutBOM;format "[write]@\"%\"\n" this.startupFilePath;);ok;),public fn Uninstall = (this.unregisterPreSystemShutdown();this.deleteStartupFile();::startupLoader = undefined;format "[uninstall]::startupLoader\n";ok;),public fn UnregisterFile scriptFilePath = (if not this.hasSystemShutdownStarted do (local index = findItem this.scriptFiles scriptFilePath;if index > 0 do (deleteItem this.installerFlags index;deleteItem this.scriptFiles index;this.notify #(#InstallerFlags, #ScriptFiles);););findItem this.scriptFiles scriptFilePath == 0;),private fn deleteStartupFile = (local result = not this.existsStartupFile();if not result do (this.fileClass.Delete this.startupFilePath;result = not this.existsStartupFile(););if result do (format "[delete]@\"%\"\n" this.startupFilePath;);result;),private fn existsStartupFile = (this.fileClass.Exists this.startupFilePath;),private fn initializeStartupFilePath = (local userStartupScriptsDir = SymbolicPaths.GetPathValue "$UserStartupScripts";this.startupFilePath = userStartupScriptsDir + @"\StartupLoader.ms";ok;),private fn registerPreSystemShutdown = (Callbacks.AddScript #PreSystemShutdown this.OnPreSystemShutdown id:#StartupLoader;ok;),private fn unregisterPreSystemShutdown = (Callbacks.RemoveScripts  #PreSystemShutdown id:#StartupLoader;ok;),private version = "1.0.0",public fn StructName = #StartupLoaderStruct,public fn Dump indent:"" out:listener = (format "%StartupLoaderStruct.Dump\n" indent to:out;format "%  globalVarName:\"%\"\n" indent this.globalVarName to:out;format "%  hasSystemShutdownStarted:%\n" indent this.hasSystemShutdownStarted to:out;format "%  startupFilePath:@\"%\"\n" indent this.startupFilePath to:out;format "%  installerFlags:%\n" indent this.installerFlags.Count to:out;format "%  scriptFiles:%\n" indent this.scriptFiles.Count to:out;for i = 1 to this.scriptFiles.Count do (format "%    [%]:\n" indent i to:out;format "%      installer:%\n" indent this.installerFlags[i] to:out;format "%      path:@\"%\"\n" indent this.scriptFiles[i] to:out;);ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true;isEqualStructName and isEqualProperties;),public fn GetVersion = (this.version;),private observers = #(),public fn AddObserver observer = (if this.findObserver observer == 0 do (append this.observers observer;);this.findObserver observer > 0;),public fn RemoveObserver observer = (local index = this.findObserver observer;if index > 0 do (deleteItem this.observers index;);this.findObserver observer == 0;),private fn findObserver observer = (local index = 0;for i = 1 to this.observers.Count while index == 0 do (if this.observers[i].Equals observer do (index = i;););index;),private fn notify params type: = (for observer in this.observers do (observer.Callback observer.Context params type:type;);ok;),on Create do (::startupLoader = this;this.initializeStartupFilePath();this.registerPreSystemShutdown();););::StartupLoaderStruct.Install();::StartupLoaderStruct;
