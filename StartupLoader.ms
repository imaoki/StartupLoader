/*! © 2021 imaoki | MIT License | https://github.com/imaoki */
/*- @var <Struct:StartupLoaderStruct> */
global startupLoader
/*-
スタートアップスクリプトを管理する。
*/
struct StartupLoaderStruct (
  /*- @prop <BooleanClass> シャットダウンプロセスが開始されたかどうか。既定値は`false`。 */
  private hasSystemShutdownStarted = false,
  /*- @prop <Array[<String>]> 登録スクリプトファイル。 */
  private scriptFiles = #(),
  /*- @prop <String> スタートアップファイルのパス。 */
  private startupFilePath = "",

  /*- @prop <DotNetClass:System.DateTime> */
  private dateTimeClass = DotNetClass "System.DateTime",
  /*- @prop <DotNetClass:System.IO.File> */
  private fileClass = DotNetClass "System.IO.File",
  /*- @prop <String> 自己のインスタンスを格納するグローバル変数の名前。既定値は`"startupLoader"`。 */
  private globalVarName = "startupLoader",
  /*- @prop <DotNetClass:System.IO.Path> */
  private pathClass = DotNetClass "System.IO.Path",
  /*- @prop <DotNetObject:System.Text.UTF8Encoding> */
  private utf8withoutBOM = DotNetObject "System.Text.UTF8Encoding" false,

  /*
  public fn GetScriptFiles = (),
  public fn GetStartupFilePath = (),
  public fn Install = (),
  public fn OnPreSystemShutdown = (),
  public fn RegisterScript scriptFilePath = (),
  public fn Save = (),
  public fn Uninstall = (),
  public fn UnregisterScript scriptFilePath = (),

  private fn deleteStartupFile = (),
  private fn existsStartupFile = (),
  private fn initializeStartupFilePath = (),
  private fn registerPreSystemShutdown = (),
  private fn unregisterPreSystemShutdown = (),
  */

  /*-
  全ての登録スクリプトファイルを取得する。
  @returns <Array[<String>]>
  */
  public fn GetScriptFiles = (
    this.scriptFiles
  ),

  /*-
  スタートアップファイルのパスを取得する。
  @returns <Array[<String>]>
  */
  public fn GetStartupFilePath = (
    this.startupFilePath
  ),

  /*-
  インストールする。
  @returns <OkClass>
  @remarks 静的メソッド。
  */
  public fn Install = (
    (::StartupLoaderStruct()).Save()
    ok
  ),

  /*-
  #PreSystemShutdownコールバックによって呼び出されるメソッド。
  */
  public fn OnPreSystemShutdown = (
    this.Save()
    this.hasSystemShutdownStarted = true
    ok
  ),

  /*-
  スクリプトファイルを登録する。
  @param scriptFilePath <String>
  @returns <BooleanClass> 成功した場合（既に登録済みの場合も）は`true`、失敗した場合は`false`。
  */
  public fn RegisterScript scriptFilePath = (
    if findItem this.scriptFiles scriptFilePath == 0 do (
      append this.scriptFiles scriptFilePath
      this.notify #(#ScriptFiles)
    )
    findItem this.scriptFiles scriptFilePath > 0
  ),

  /*-
  内部状態をスタートアップファイルに書き出す。
  @returns <OkClass>
  */
  public fn Save = (
    if not this.hasSystemShutdownStarted do (
      local content = StringStream ""
      local now = this.dateTimeClass.Now.ToString "yyyy/MM/dd HH:mm:ss K"
      format "/* Generated by StartupLoader at % */\n" now to:content
      format "(fileIn @\"%\")()\n" (getSourceFileName()) to:content
      for filePath in this.scriptFiles do (
        format "fileIn @\"%\"\n" filePath to:content
      )
      format "::%.Save()\n" this.globalVarName to:content
      content = content as String
      this.fileClass.WriteAllText this.startupFilePath content this.utf8withoutBOM
      format "[write]@\"%\"\n" this.startupFilePath
    )
    ok
  ),

  /*-
  アンインストールする。
  @returns <OkClass>
  */
  public fn Uninstall = (
    this.unregisterPreSystemShutdown()
    this.deleteStartupFile()
    ::startupLoader = undefined
    format "[destroy]::startupLoader\n"
    ok
  ),

  /*-
  スクリプトファイルを登録解除する。
  @param scriptFilePath <String>
  @returns <BooleanClass> 成功した場合（元から登録されていない場合も）は`true`、失敗した場合は`false`。
  @remarks シャットダウンプロセス中は処理を行わない。
  */
  public fn UnregisterScript scriptFilePath = (
    if not this.hasSystemShutdownStarted do (
      local index = findItem this.scriptFiles scriptFilePath
      if index > 0 do (
        deleteItem this.scriptFiles index
        this.notify #(#ScriptFiles)
      )
    )
    findItem this.scriptFiles scriptFilePath == 0
  ),

  /*-
  スタートアップファイルを削除する。
  @returns <BooleanClass> 成功した場合は`true`、失敗した場合は`false`。
  */
  private fn deleteStartupFile = (
    local result = not this.existsStartupFile()
    if not result do (
      this.fileClass.Delete this.startupFilePath
      result = not this.existsStartupFile()
    )
    if result do (
      format "[delete]@\"%\"\n" this.startupFilePath
    )
    result
  ),

  /*-
  スタートアップファイルが存在するかどうかを判定する。
  @returns <BooleanClass>
  */
  private fn existsStartupFile = (
    this.fileClass.Exists this.startupFilePath
  ),

  /*-
  スタートアップファイルのファイル名を初期化する。
  @returns <OkClass>
  */
  private fn initializeStartupFilePath = (
    local userStartupScriptsDir = SymbolicPaths.GetPathValue "$UserStartupScripts"
    this.startupFilePath = userStartupScriptsDir + @"\StartupLoader.ms"
    ok
  ),

  /*-
  #PreSystemShutdownコールバックを登録する。
  @returns <OkClass>
  */
  private fn registerPreSystemShutdown = (
    Callbacks.AddScript #PreSystemShutdown this.OnPreSystemShutdown id:#StartupLoader
    ok
  ),

  /*-
  #PreSystemShutdownコールバックを登録解除する。
  @returns <OkClass>
  */
  private fn unregisterPreSystemShutdown = (
    Callbacks.RemoveScripts  #PreSystemShutdown id:#StartupLoader
    ok
  ),

  /*- @returns <Name> */
  public fn StructName = #StartupLoaderStruct,

  /*-
  @param indent: <String>
  @param out: <FileStream|StringStream|WindowStream> 出力先。既定値は`listener`。
  @returns <OkClass>
  */
  public fn Dump indent:"" out:listener = (
    format "%StartupLoaderStruct.Dump\n" indent to:out
    format "%  globalVarName:\"%\"\n" indent this.globalVarName to:out
    format "%  hasSystemShutdownStarted:%\n" indent this.hasSystemShutdownStarted to:out
    format "%  startupFilePath:@\"%\"\n" indent this.startupFilePath to:out
    format "%  scriptFiles:%\n" indent this.scriptFiles.Count to:out
    for i = 1 to this.scriptFiles.Count do (
      format "%    [%]:@\"%\"\n" indent i this.scriptFiles[i] to:out
    )
    ok
  ),

  /*-
  @param obj <Any>
  @returns <BooleanClass>
  @remarks 大文字と小文字を区別する。
  */
  public fn Equals obj = (
    local isEqualStructName = isStruct obj \
        and isProperty obj #StructName \
        and classOf obj.StructName == MAXScriptFunction \
        and obj.StructName() == this.StructName()

    local isEqualProperties = true

    isEqualStructName and isEqualProperties
  ),

  /*- @prop <Array[<Struct:ObserverStruct>]> */
  private observers = #(),

  /*-
  @param observer <Struct:ObserverStruct>
  @returns <BooleanClass> 成功した場合は`true`、失敗した場合は`false`。
  */
  public fn AddObserver observer = (
    if this.findObserver observer == 0 do (
      append this.observers observer
    )
    this.findObserver observer > 0
  ),

  /*-
  @param observer <Struct:ObserverStruct>
  @returns <BooleanClass> 成功した場合は`true`、失敗した場合は`false`。
  */
  public fn RemoveObserver observer = (
    local index = this.findObserver observer
    if index > 0 do (
      deleteItem this.observers index
    )
    this.findObserver observer == 0
  ),

  /*-
  @param observer <Struct:ObserverStruct>
  @returns <Integer>
  */
  private fn findObserver observer = (
    local index = 0
    for i = 1 to this.observers.Count while index == 0 do (
      if this.observers[i].Equals observer do (
        index = i
      )
    )
    index
  ),

  /*-
  @param params <Array[<Name>]|Any>
  @param type: <Name>
  @returns <OkClass>
  */
  private fn notify params type: = (
    for observer in this.observers do (
      observer.Callback observer.Context params type:type
    )
    ok
  ),

  on Create do (
    ::startupLoader = this
    this.initializeStartupFilePath()
    this.registerPreSystemShutdown()
    format "[define]::startupLoader\n"
  )
)
