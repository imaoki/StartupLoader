/*! © 2022 imaoki | MIT License | https://github.com/imaoki */
/*- @var <Struct:StartupLoaderStruct> */
global startupLoader
/*-
スタートアップスクリプトを管理する。
*/
struct StartupLoaderStruct (
  /*- @prop <BooleanClass> シャットダウンプロセスが開始されたかどうか。既定値は`false`。 */
  private hasSystemShutdownStarted = false,
  /*- @prop <Array[<BooleanClass>]> スクリプトファイルをインストーラとして評価するかどうか。既定値は`#()`。 */
  private installerFlags = #(),
  /*- @prop <Array[<String>]> 登録スクリプトファイル。既定値は`#()`。 */
  private scriptFiles = #(),
  /*- @prop <String> スタートアップファイルのパス。既定値は`""`。 */
  private startupFilePath = "",

  /*- @prop <DotNetClass:System.DateTime> */
  private dateTimeClass = DotNetClass "System.DateTime",
  /*- @prop <DotNetClass:System.IO.File> */
  private fileClass = DotNetClass "System.IO.File",
  /*- @prop <String> 自己のインスタンスを格納するグローバル変数の名前。既定値は`"startupLoader"`。 */
  private globalVarName = "startupLoader",
  /*- @prop <DotNetClass:System.IO.Path> */
  private pathClass = DotNetClass "System.IO.Path",
  /*- @prop <DotNetObject:System.Text.UTF8Encoding> */
  private utf8withoutBOM = DotNetObject "System.Text.UTF8Encoding" false,

  /*
  public fn GetInstallerFlags = (),
  public fn GetScriptFiles = (),
  public fn GetStartupFilePath = (),
  public fn Install = (),
  public fn OnPreSystemShutdown = (),
  public fn RegisterFile scriptFilePath installer:false = (),
  public fn Uninstall = (),
  public fn UnregisterFile scriptFilePath = (),
  public fn Write = (),

  private fn deleteStartupFile = (),
  private fn existsStartupFile = (),
  private fn initializeStartupFilePath = (),
  private fn registerPreSystemShutdown = (),
  private fn unregisterPreSystemShutdown = (),
  */

  /*-
  スクリプトファイルをインストーラとして評価するかどうかを取得する。
  @returns <Array[<BooleanClass>]>
  */
  public fn GetInstallerFlags = (
    this.installerFlags
  ),

  /*-
  登録スクリプトファイルを取得する。
  @returns <Array[<String>]>
  */
  public fn GetScriptFiles = (
    this.scriptFiles
  ),

  /*-
  スタートアップファイルのパスを取得する。
  @returns <Array[<String>]>
  */
  public fn GetStartupFilePath = (
    this.startupFilePath
  ),

  /*-
  インストールする。
  @returns <OkClass>
  @remarks 静的メソッド。
  */
  public fn Install = (
    ::StartupLoaderStruct()
    format "[install]::startupLoader\n"
    ok
  ),

  /*-
  #PreSystemShutdownコールバックによって呼び出されるメソッド。
  */
  public fn OnPreSystemShutdown = (
    this.Write()
    this.hasSystemShutdownStarted = true
    ok
  ),

  /*-
  スクリプトファイルを登録する。
  @param scriptFilePath <String>
  @param installer: <BooleanClass> ファイルをインストーラとして評価する場合は`true`、通常のスクリプトとして評価する場合は`false`。既定値は`false`。
  @returns <BooleanClass> 成功した場合（既に登録済みの場合も）は`true`、失敗した場合は`false`。
  @remarks 登録したスクリプトファイルをインストーラとして評価するには以下の条件を満たす必要がある。

  * スクリプトファイルの評価結果が構造体定義であること

  * 引数を持たない静的メソッド`Install`を持っていること
  */
  public fn RegisterFile scriptFilePath installer:false = (
    if findItem this.scriptFiles scriptFilePath == 0 do (
      append this.installerFlags installer
      append this.scriptFiles scriptFilePath
    )
    findItem this.scriptFiles scriptFilePath > 0
  ),

  /*-
  アンインストールする。
  @returns <OkClass>
  */
  public fn Uninstall = (
    this.unregisterPreSystemShutdown()
    this.deleteStartupFile()
    ::startupLoader = undefined
    format "[uninstall]::startupLoader\n"
    ok
  ),

  /*-
  スクリプトファイルを登録解除する。
  @param scriptFilePath <String>
  @returns <BooleanClass> 成功した場合（元から登録されていない場合も）は`true`、失敗した場合は`false`。
  @remarks ツールの終了処理によって状態が変更されることを防ぐため、シャットダウンプロセス中は処理を行わない。
  */
  public fn UnregisterFile scriptFilePath = (
    if not this.hasSystemShutdownStarted do (
      local index = findItem this.scriptFiles scriptFilePath
      if index > 0 do (
        deleteItem this.installerFlags index
        deleteItem this.scriptFiles index
      )
    )
    findItem this.scriptFiles scriptFilePath == 0
  ),

  /*-
  内部状態をスタートアップファイルに書き出す。
  @returns <OkClass>
  */
  public fn Write = (
    if not this.hasSystemShutdownStarted do (
      local content = StringStream ""
      local now = this.dateTimeClass.Now.ToString "yyyy/MM/dd HH:mm:ss K"
      format "/* Generated by StartupLoader % at % */\n" this.version now to:content
      format "fileIn @\"%\"\n" (getSourceFileName()) to:content
      for i = 1 to this.scriptFiles.Count do (
        local scriptFilePath = this.scriptFiles[i]
        if this.installerFlags[i] then (
          format "(fileIn @\"%\").Install()\n" scriptFilePath to:content
        )
        else (
          format "fileIn @\"%\"\n" scriptFilePath to:content
        )
      )
      format "::%.Write()\n" this.globalVarName to:content
      content = content as String
      this.fileClass.WriteAllText this.startupFilePath content this.utf8withoutBOM
      format "[write]@\"%\"\n" this.startupFilePath
    )
    ok
  ),

  /*-
  スタートアップファイルを削除する。
  @returns <BooleanClass> 成功した場合は`true`、失敗した場合は`false`。
  */
  private fn deleteStartupFile = (
    local result = not this.existsStartupFile()
    if not result do (
      this.fileClass.Delete this.startupFilePath
      result = not this.existsStartupFile()
    )
    if result do (
      format "[delete]@\"%\"\n" this.startupFilePath
    )
    result
  ),

  /*-
  スタートアップファイルが存在するかどうかを判定する。
  @returns <BooleanClass>
  */
  private fn existsStartupFile = (
    this.fileClass.Exists this.startupFilePath
  ),

  /*-
  スタートアップファイルのファイル名を初期化する。
  @returns <OkClass>
  */
  private fn initializeStartupFilePath = (
    local userStartupScriptsDir = SymbolicPaths.GetPathValue "$UserStartupScripts"
    this.startupFilePath = userStartupScriptsDir + @"\StartupLoader.ms"
    ok
  ),

  /*-
  #PreSystemShutdownコールバックを登録する。
  @returns <OkClass>
  */
  private fn registerPreSystemShutdown = (
    Callbacks.AddScript #PreSystemShutdown this.OnPreSystemShutdown id:#StartupLoader
    ok
  ),

  /*-
  #PreSystemShutdownコールバックを登録解除する。
  @returns <OkClass>
  */
  private fn unregisterPreSystemShutdown = (
    Callbacks.RemoveScripts  #PreSystemShutdown id:#StartupLoader
    ok
  ),

  /*- @prop <String> バージョン番号。メジャー、マイナー、パッチの順。 */
  private version = "1.3.0",

  /*- @returns <Name> */
  public fn StructName = #StartupLoaderStruct,

  /*-
  @param indent: <String>
  @param out: <FileStream|StringStream|WindowStream> 出力先。既定値は`listener`。
  @returns <OkClass>
  */
  public fn Dump indent:"" out:listener = (
    format "%StartupLoaderStruct.Dump\n" indent to:out
    format "%  globalVarName:\"%\"\n" indent this.globalVarName to:out
    format "%  hasSystemShutdownStarted:%\n" indent this.hasSystemShutdownStarted to:out
    format "%  startupFilePath:@\"%\"\n" indent this.startupFilePath to:out

    format "%  installerFlags:%\n" indent this.installerFlags.Count to:out
    format "%  scriptFiles:%\n" indent this.scriptFiles.Count to:out
    for i = 1 to this.scriptFiles.Count do (
      format "%    [%]:\n" indent i to:out
      format "%      installer:%\n" indent this.installerFlags[i] to:out
      format "%      path:@\"%\"\n" indent this.scriptFiles[i] to:out
    )
    ok
  ),

  /*-
  @param obj <Any>
  @returns <BooleanClass>
  @remarks 大文字と小文字を区別する。
  */
  public fn Equals obj = (
    local isEqualStructName = isStruct obj \
        and isProperty obj #StructName \
        and classOf obj.StructName == MAXScriptFunction \
        and obj.StructName() == this.StructName()

    local isEqualProperties = true

    isEqualStructName and isEqualProperties
  ),

  /*-
  @returns <String>
  */
  public fn GetVersion = (
    this.version
  ),

  on Create do (
    ::startupLoader = this
    this.initializeStartupFilePath()
    this.registerPreSystemShutdown()
  )
)
::StartupLoaderStruct.Install()
::StartupLoaderStruct
